' Gambas module file

' comando: gambasinfobug
' creado por postapase 25/05/2021
' cÃ³digo basado en FSystemInfo de gambas3

Private sTab As String = "   "

Public Sub Main()

  Dim a As Integer
  Dim sArg As String

  For a = 1 To Args.Max
    sArg = Args[a]
    If sArg = "--help" Or If sArg = "-h" Then
      PrintHelp
      Quit
    Else If sArg = "--version" Or If sArg = "-v" Then
      Print GetVersion()
      Quit
    Else If sArg = "--text" Or If sArg = "-t" Then
      PrintInfo
      Quit
    Else If sArg = "--file" Or If sArg = "-f" Then
      SaveInfoInFile
      Quit
    Else
      Print "unknown command --> " & sArg
    Endif
  Next

  PrintHelp
  Quit

End

Public Sub PrintHelp()

  Print
  Print "gambasinfobug [argument]"
  Print
  Print sTab & "-h, --help   print this help"
  Print sTab & "-t, --texto  print system information on screen"
  Print sTab & "-f, --file   Save system info in file SystemInfoForBug"
  Print sTab & "             (in current directory)"
  Print
  Print "Scheduled by postapase"
  Print "Report bugs: uno.cero@live.com"
  Print

End

Public Sub PrintInfo()

  Dim sElement As String
  Dim aText As String[]

  aText = GetInfo()
  MakeAnonymous(aText)
  For Each sElement In aText
    Print sElement
    Wait 0.03
  Next

End

Public Sub SaveInfoInFile()

  Dim sElement As String
  Dim sTextFile As String
  Dim sPathCurrent As String
  Dim sPathEnd As String
  Dim aText As String[]

  aText = GetInfo()
  MakeAnonymous(aText)
  For Each sElement In aText
    sTextFile &= sElement & gb.NewLine
  Next

  Shell "pwd" To sPathCurrent

  sPathEnd = Replace(sPathCurrent, gb.NewLine, "") &/ "SystemInfoForBug"

  Try Kill sPathEnd

  Try File.Save(sPathEnd, sTextFile)

  If Error Then
    Print Error.Text & gb.NewLine & Error.Where
  Else
    If Exist(sPathEnd) Then
      Print "File created successfully in:" & gb.NewLine & sPathEnd
      Print
    Else
      Print "Error trying to create file"
    Endif
  Endif

End

Public Sub GetVersion() As String

  Return Application.Name & " version " & Application.Version

End

Sub MakeAnonymous(aText As String[])

  Dim I As Integer
  Dim sText As String

  For I = 0 To aText.Max
    sText = Replace(aText[I], System.Host, "<hostname>")
    sText = Replace(sText, User.Home, "<home>")
    aText[I] = Replace(sText, User.Name, "<user>")
  Next

End

Public Sub GetLang() As String

  Dim sLANG As String

  Try Shell "locale | grep LANG= | cut -d '=' -f 2" To sLANG

  If Error Then
    sLANG = "?"
  Else
    sLANG = Trim(Replace(sLANG, gb.NewLine, ""))
  Endif

  Return sLANG

End

Public Sub GetKernel() As String

  Dim sTemp As String

  Exec ["uname", "-r"] To sTemp

  Return Trim(sTemp)

End

Public Sub GetLibraries() As String[]

  Dim cSearch As Collection
  Dim cFile As Collection
  Dim sDir As String
  Dim sFile As String
  Dim sPattern As String
  Dim aLib As New String[]
  Dim aSearchPath As New String[]
  Dim sVar As String

  If System.Family = "Cygwin" Then

    aSearchPath = ["/bin", "/usr/lib"]

    cSearch = ["QT4": "cygQtCore*.dll", "QT5": "cygQt5Core*.dll", "GTK+2": "cyggtk-x11-2*.dll", "GTK+3": "cyggtk-3-*.dll", "SDL": "cygSDL-*.dll", "GStreamer": "cyggstreamer-*.dll", "Poppler": "cygpoppler-*.dll", "Curl": "cygcurl-*.dll", "OpenGL": "cygGL-*.dll",
      "Cairo": "cygcairo-[0-9]*.dll", "DBus": "cygdbus-[0-9]*.dll", "SQLite 3": "libsqlite3*.dll"]

  Else

    sVar = Env["LIBPATH"]
    Print sVar
    If sVar Then
      aSearchPath = Split(sVar, ":")
    Else
      aSearchPath = ["/usr/lib"]
    Endif

    cSearch = ["QT4": "libQtCore.so.*.*.*", "QT5": "libQt5Core.so.*.*.*", "GDK2": "libgdk-x11-2*.so.*.*.*", "GTK+2": "libgtk-x11-2*.so.*.*.*", "GDK3": "libgdk-3*.so.*.*.*", "GTK+3": "libgtk-3*.so.*.*.*", "SDL": "libSDL-1.*.so.*.*.*", "GStreamer": "libgstreamer-*.so.*.*.*", "Poppler": "libpoppler.so.*.*.*", "Curl": "libcurl.so.*.*.*",
      "OpenGL": "libGL.so.*.*.*", "Cairo": "libcairo.so.*.*.*", "DBus": "libdbus-[0-9].so.*.*.*", "SQLite": "libsqlite3.so.*.*.*"]

  Endif

  If Stat("/lib", False).Type = gb.Directory Then 'Some systems link /lib to /usr/lib
    aSearchPath.Add("/lib", 0)
  Endif

  cFile = New Collection

  For Each sDir In aSearchPath
    For Each sFile In RDir(sDir, "", gb.File, False)
      sFile = File.Name(sFile)
      For Each sPattern In cSearch
        If sFile Like sPattern And If Not cFile.Exist(sFile) Then
          aLib.Add(sTab & cSearch.Key & "= " & sFile)
          cFile[sFile] = True
          Break
        Endif
      Next
    Next
  Next

  Return aLib.Sort()

End

Public Sub GetMemory() As String

End

Public Sub GetEnvironment() As String[]

  Dim aText As New String[]
  Dim sVar As String
  Dim aEnv As New String[]

  For Each sVar In Env
    aEnv.Add(sVar)
  Next

  For Each sVar In aEnv
    aText.Add(sTab & sVar & "= " & Env[sVar])
  Next

  Return aText.Sort()

End

Public Sub GetInfo() As String[]

  Dim aText As New String[]
  Dim sTemp As String

  aText.Add(Application.Title & " version " & Application.Version & gb.NewLine)

  aText.Add("[System]")
  aText.Add(sTab & "Gambas= " & VersionGambas())
  aText.Add(sTab & "OperatingSystem= " & System.Family)
  aText.Add(sTab & "Kernel= " & GetKernel())
  aText.Add(sTab & "Architecture= " & System.Architecture)
  aText.Add(sTab & "Distribution= " & GetDistribution())
  aText.Add(sTab & "Desktop= " & Env["XDG_CURRENT_DESKTOP"])

  ' aText.Add("Font=" & Application.Font.ToString())'original
  aText.Add(sTab & "Font= " & "?")

  ' aText.Add("Scale=" & Desktop.Scale)
  aText.Add(sTab & "Scale= " & "?")
  ' aText.Add("Theme=" & Style.Name)
  aText.Add(sTab & "Theme=" & "?")

  aText.Add(sTab & "Language= " & GetLang())

  If System.Family = "FreeBSD" Then
    Exec ["sysctl", "-n", "hw.physmem"] To sTemp
    sTemp = CStr(CLong(Trim(sTemp)) \ 1024)
  Else
    Exec ["cat", "/proc/meminfo"] To sTemp
    Try sTemp = Scan(sTemp, "*MemTotal:*\n*")[1]
    If Error Then
      sTemp = ""
    Else
      While Not IsDigit(Right(sTemp))
        sTemp = Left(sTemp, -1)
      Wend
      sTemp = Trim(sTemp)
    Endif
  Endif

  If sTemp Then
    Try sTemp = Format(CInt(sTemp) / 1024, "0") & "M"
    If Not Error Then aText.Add(sTab & "Memory= " & sTemp)
  Endif

  aText.Add("")
  aText.Add("[Libraries]")
  aText.Insert(GetLibraries())

  aText.Add("")
  aText.Add("[Environment]")
  aText.Insert(GetEnvironment())

  Return aText

End

Private Sub GetDistribution() As String

  Dim cDist As Collection = ["lsb-release": "/etc/lsb-release", "vector": "/etc/vector-version", "slackware": "/etc/slackware-version", "debian": "/etc/debian_version",
    "redhat": "/etc/redhat-release", "arch": "/etc/arch-release", "SuSE": "/etc/os-release", "gentoo": "/etc/gentoo-release", "conectiva": "/etc/conectiva-release",
    "mandriva": "/etc/mandriva-release", "pardus": "/etc/pardus-release", "kanotix": "/etc/kanotix-release"]

  Dim sPath As String
  Dim sDistro As String
  Dim cData As Collection
  Dim iPos As Integer

  For Each sPath In cDist
    sDistro = cDist.Key

    If Not Exist(sPath) Then Continue

    If sDistro = "lsb-release" Then
      cData = ReadLsbRelease(sPath)
      sDistro = cData["DISTRIB_DESCRIPTION"]
      If sDistro Then Return sDistro
      Return cData["DISTRIB_ID"] & " " & cData["DISTRIB_RELEASE"]
    Else
      Return sDistro & " " & Trim(File.Load(sPath))
    Endif

  Next

  If Exist("/etc/issue") Then
    sDistro = File.Load("/etc/issue")
    If sDistro Then
      iPos = InStr(sDistro, "\\")
      If iPos Then sDistro = Left(sDistro, iPos - 1)
    Endif
  Else
    Exec ["uname", "-s"] To sDistro
  Endif
  Return Trim(sDistro)

End

Private Sub ReadLsbRelease(sPath As String) As Collection

  Dim cCol As New Collection
  Dim sLine As String
  Dim aLine As String[]

  For Each sLine In Split(File.Load(sPath), "\n", "", True)

    aLine = Scan(sLine, "*=*")
    Try cCol[aLine[0]] = UnQuote(aLine[1])

  Next

  Return cCol

End

Private Sub VersionGambas() As String

  Dim sVer As String
  Dim FullVersionWithRevision As String

  Exec [System.Path &/ "bin/gbx" & System.Version, "-V"] To sVer
  FullVersionWithRevision = Trim(sVer)
  If FullVersionWithRevision Ends ".0" Then FullVersionWithRevision = Left$(FullVersionWithRevision, -2)

  Return FullVersionWithRevision

End
